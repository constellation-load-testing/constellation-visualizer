{"ast":null,"code":"import createTime from'./createTime';function aggregateTests(testsResponse,aggTime){var formatedTests=[];var testsTracker={total:0,cummulative:0};var trackedMilliseconds;testsResponse.Rows.forEach(function(row,i){var millisecStamp=Date.parse(row.Data[2].ScalarValue);var timeToFormat=new Date(trackedMilliseconds);if(!trackedMilliseconds){trackedMilliseconds=millisecStamp;testsTracker.total+=1;testsTracker.cummulative+=row.Data[3].ScalarValue;}else if(millisecStamp>=trackedMilliseconds+1000*aggTime){formatedTests.push({time:createTime(timeToFormat),runtime:testsTracker.cummulative/testsTracker.total});trackedMilliseconds=millisecStamp;testsTracker={total:0,cummulative:0};testsTracker.total+=1;testsTracker.cummulative+=Number(row.Data[3].ScalarValue);}else if(i+1===testsResponse.Rows.length){formatedTests.push({time:createTime(timeToFormat),runtime:testsTracker.cummulative/testsTracker.total});testsTracker={total:0,cummulative:0};}});return formatedTests;}export default aggregateTests;","map":{"version":3,"names":["createTime","aggregateTests","testsResponse","aggTime","formatedTests","testsTracker","total","cummulative","trackedMilliseconds","Rows","forEach","row","i","millisecStamp","Date","parse","Data","ScalarValue","timeToFormat","push","time","runtime","Number","length"],"sources":["/home/jakedevar/help_constellation/constellation-local/constellation-visualizer/src/utils/aggregateTests.js"],"sourcesContent":["import createTime from './createTime';\nfunction aggregateTests(testsResponse, aggTime) {\n  const formatedTests = [];\n  let testsTracker = {\n    total: 0,\n    cummulative: 0\n  };\n  let trackedMilliseconds;\n  testsResponse.Rows.forEach((row, i) => {\n    let millisecStamp = Date.parse(row.Data[2].ScalarValue)\n    let timeToFormat = new Date(trackedMilliseconds);\n    if (!trackedMilliseconds) {\n      trackedMilliseconds = millisecStamp;\n      testsTracker.total += 1;\n      testsTracker.cummulative += row.Data[3].ScalarValue;\n    } else if (millisecStamp >= trackedMilliseconds + (1000 * aggTime)) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      trackedMilliseconds = millisecStamp;\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n      testsTracker.total += 1;\n      testsTracker.cummulative += Number(row.Data[3].ScalarValue);\n    } else if (i+1 === testsResponse.Rows.length) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n    } \n  })\n  return formatedTests;\n}\n\nexport default aggregateTests;\n"],"mappings":"AAAA,MAAOA,WAAU,KAAM,cAAc,CACrC,QAASC,eAAc,CAACC,aAAa,CAAEC,OAAO,CAAE,CAC9C,GAAMC,cAAa,CAAG,EAAE,CACxB,GAAIC,aAAY,CAAG,CACjBC,KAAK,CAAE,CAAC,CACRC,WAAW,CAAE,CACf,CAAC,CACD,GAAIC,oBAAmB,CACvBN,aAAa,CAACO,IAAI,CAACC,OAAO,CAAC,SAACC,GAAG,CAAEC,CAAC,CAAK,CACrC,GAAIC,cAAa,CAAGC,IAAI,CAACC,KAAK,CAACJ,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CACvD,GAAIC,aAAY,CAAG,GAAIJ,KAAI,CAACN,mBAAmB,CAAC,CAChD,GAAI,CAACA,mBAAmB,CAAE,CACxBA,mBAAmB,CAAGK,aAAa,CACnCR,YAAY,CAACC,KAAK,EAAI,CAAC,CACvBD,YAAY,CAACE,WAAW,EAAII,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,WAAW,CACrD,CAAC,IAAM,IAAIJ,aAAa,EAAIL,mBAAmB,CAAI,IAAI,CAAGL,OAAQ,CAAE,CAClEC,aAAa,CAACe,IAAI,CAAC,CACjBC,IAAI,CAAEpB,UAAU,CAACkB,YAAY,CAAC,CAC9BG,OAAO,CAAEhB,YAAY,CAACE,WAAW,CAAGF,YAAY,CAACC,KACnD,CAAC,CAAC,CACFE,mBAAmB,CAAGK,aAAa,CACnCR,YAAY,CAAG,CACbC,KAAK,CAAE,CAAC,CACRC,WAAW,CAAE,CACf,CAAC,CACDF,YAAY,CAACC,KAAK,EAAI,CAAC,CACvBD,YAAY,CAACE,WAAW,EAAIe,MAAM,CAACX,GAAG,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAC7D,CAAC,IAAM,IAAIL,CAAC,CAAC,CAAC,GAAKV,aAAa,CAACO,IAAI,CAACc,MAAM,CAAE,CAC5CnB,aAAa,CAACe,IAAI,CAAC,CACjBC,IAAI,CAAEpB,UAAU,CAACkB,YAAY,CAAC,CAC9BG,OAAO,CAAEhB,YAAY,CAACE,WAAW,CAAGF,YAAY,CAACC,KACnD,CAAC,CAAC,CACFD,YAAY,CAAG,CACbC,KAAK,CAAE,CAAC,CACRC,WAAW,CAAE,CACf,CAAC,CACH,CACF,CAAC,CAAC,CACF,MAAOH,cAAa,CACtB,CAEA,cAAeH,eAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}