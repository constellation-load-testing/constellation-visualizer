{"ast":null,"code":"import createTime from './createTime';\nfunction aggregateTests(testsResponse, aggTime, toggleExclusion, maxYAxis, setMaxYAxis) {\n  aggTime = parseInt(aggTime);\n  const formatedTests = [];\n  let testsTracker = {\n    total: 0,\n    cummulative: 0\n  };\n  let trackedMilliseconds;\n  const startExlusion = toggleExclusion ? Math.floor(testsResponse.length * 0.02) : 0;\n  const excludedTests = testsResponse.slice(startExlusion);\n  excludedTests.forEach((row, i) => {\n    let newY = Number(row[1]);\n    if (newY > maxYAxis) {\n      setMaxYAxis(newY);\n    }\n    let millisecStamp = Date.parse(row[0]);\n    let timeToFormat = new Date(trackedMilliseconds);\n    if (!trackedMilliseconds) {\n      trackedMilliseconds = millisecStamp;\n      testsTracker.total += 1;\n      testsTracker.cummulative += row[1];\n    } else if (millisecStamp >= trackedMilliseconds + 1000 * aggTime) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      trackedMilliseconds = millisecStamp;\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n      testsTracker.total += 1;\n      testsTracker.cummulative += Number(row[1]);\n    } else if (i + 1 === testsResponse.length) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n    }\n  });\n  return formatedTests;\n}\nexport default aggregateTests;","map":{"version":3,"names":["createTime","aggregateTests","testsResponse","aggTime","toggleExclusion","maxYAxis","setMaxYAxis","parseInt","formatedTests","testsTracker","total","cummulative","trackedMilliseconds","startExlusion","Math","floor","length","excludedTests","slice","forEach","row","i","newY","Number","millisecStamp","Date","parse","timeToFormat","push","time","runtime"],"sources":["/home/jakedevar/help_constellation/constellation-local/constellation-visualizer/src/utils/aggregateTests.js"],"sourcesContent":["import createTime from './createTime';\nfunction aggregateTests(testsResponse, aggTime, toggleExclusion, maxYAxis, setMaxYAxis) {\n  aggTime = parseInt(aggTime);\n  const formatedTests = [];\n  let testsTracker = {\n    total: 0,\n    cummulative: 0\n  };\n  let trackedMilliseconds;\n  const startExlusion = toggleExclusion ? Math.floor(testsResponse.length * 0.02): 0;\n  const excludedTests = testsResponse.slice(startExlusion);\n  excludedTests.forEach((row, i) => {\n    let newY = Number(row[1]);\n    if (newY > maxYAxis) {\n      setMaxYAxis(newY);\n    }\n    let millisecStamp = Date.parse(row[0])\n    let timeToFormat = new Date(trackedMilliseconds);\n    if (!trackedMilliseconds) {\n      trackedMilliseconds = millisecStamp;\n      testsTracker.total += 1;\n      testsTracker.cummulative += row[1];\n    } else if (millisecStamp >= trackedMilliseconds + (1000 * aggTime)) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      trackedMilliseconds = millisecStamp;\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n      testsTracker.total += 1;\n      testsTracker.cummulative += Number(row[1]);\n    } else if (i+1 === testsResponse.length) {\n      formatedTests.push({\n        time: createTime(timeToFormat),\n        runtime: testsTracker.cummulative / testsTracker.total\n      });\n      testsTracker = {\n        total: 0,\n        cummulative: 0\n      };\n    } \n  })\n  return formatedTests;\n}\n\nexport default aggregateTests;\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,cAAc;AACrC,SAASC,cAAc,CAACC,aAAa,EAAEC,OAAO,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EACtFH,OAAO,GAAGI,QAAQ,CAACJ,OAAO,CAAC;EAC3B,MAAMK,aAAa,GAAG,EAAE;EACxB,IAAIC,YAAY,GAAG;IACjBC,KAAK,EAAE,CAAC;IACRC,WAAW,EAAE;EACf,CAAC;EACD,IAAIC,mBAAmB;EACvB,MAAMC,aAAa,GAAGT,eAAe,GAAGU,IAAI,CAACC,KAAK,CAACb,aAAa,CAACc,MAAM,GAAG,IAAI,CAAC,GAAE,CAAC;EAClF,MAAMC,aAAa,GAAGf,aAAa,CAACgB,KAAK,CAACL,aAAa,CAAC;EACxDI,aAAa,CAACE,OAAO,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAK;IAChC,IAAIC,IAAI,GAAGC,MAAM,CAACH,GAAG,CAAC,CAAC,CAAC,CAAC;IACzB,IAAIE,IAAI,GAAGjB,QAAQ,EAAE;MACnBC,WAAW,CAACgB,IAAI,CAAC;IACnB;IACA,IAAIE,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACN,GAAG,CAAC,CAAC,CAAC,CAAC;IACtC,IAAIO,YAAY,GAAG,IAAIF,IAAI,CAACb,mBAAmB,CAAC;IAChD,IAAI,CAACA,mBAAmB,EAAE;MACxBA,mBAAmB,GAAGY,aAAa;MACnCf,YAAY,CAACC,KAAK,IAAI,CAAC;MACvBD,YAAY,CAACE,WAAW,IAAIS,GAAG,CAAC,CAAC,CAAC;IACpC,CAAC,MAAM,IAAII,aAAa,IAAIZ,mBAAmB,GAAI,IAAI,GAAGT,OAAQ,EAAE;MAClEK,aAAa,CAACoB,IAAI,CAAC;QACjBC,IAAI,EAAE7B,UAAU,CAAC2B,YAAY,CAAC;QAC9BG,OAAO,EAAErB,YAAY,CAACE,WAAW,GAAGF,YAAY,CAACC;MACnD,CAAC,CAAC;MACFE,mBAAmB,GAAGY,aAAa;MACnCf,YAAY,GAAG;QACbC,KAAK,EAAE,CAAC;QACRC,WAAW,EAAE;MACf,CAAC;MACDF,YAAY,CAACC,KAAK,IAAI,CAAC;MACvBD,YAAY,CAACE,WAAW,IAAIY,MAAM,CAACH,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5C,CAAC,MAAM,IAAIC,CAAC,GAAC,CAAC,KAAKnB,aAAa,CAACc,MAAM,EAAE;MACvCR,aAAa,CAACoB,IAAI,CAAC;QACjBC,IAAI,EAAE7B,UAAU,CAAC2B,YAAY,CAAC;QAC9BG,OAAO,EAAErB,YAAY,CAACE,WAAW,GAAGF,YAAY,CAACC;MACnD,CAAC,CAAC;MACFD,YAAY,GAAG;QACbC,KAAK,EAAE,CAAC;QACRC,WAAW,EAAE;MACf,CAAC;IACH;EACF,CAAC,CAAC;EACF,OAAOH,aAAa;AACtB;AAEA,eAAeP,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}