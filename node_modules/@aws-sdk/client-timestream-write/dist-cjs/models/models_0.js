"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateDatabaseRequestFilterSensitiveLog = exports.UntagResourceResponseFilterSensitiveLog = exports.UntagResourceRequestFilterSensitiveLog = exports.TagResourceResponseFilterSensitiveLog = exports.TagResourceRequestFilterSensitiveLog = exports.RejectedRecordFilterSensitiveLog = exports.RecordsIngestedFilterSensitiveLog = exports._RecordFilterSensitiveLog = exports.MeasureValueFilterSensitiveLog = exports.ListTagsForResourceResponseFilterSensitiveLog = exports.ListTagsForResourceRequestFilterSensitiveLog = exports.ListTablesResponseFilterSensitiveLog = exports.ListTablesRequestFilterSensitiveLog = exports.ListDatabasesResponseFilterSensitiveLog = exports.ListDatabasesRequestFilterSensitiveLog = exports.DimensionFilterSensitiveLog = exports.DescribeTableResponseFilterSensitiveLog = exports.DescribeTableRequestFilterSensitiveLog = exports.DescribeEndpointsResponseFilterSensitiveLog = exports.EndpointFilterSensitiveLog = exports.DescribeEndpointsRequestFilterSensitiveLog = exports.DescribeDatabaseResponseFilterSensitiveLog = exports.DescribeDatabaseRequestFilterSensitiveLog = exports.DeleteTableRequestFilterSensitiveLog = exports.DeleteDatabaseRequestFilterSensitiveLog = exports.CreateTableResponseFilterSensitiveLog = exports.TableFilterSensitiveLog = exports.CreateTableRequestFilterSensitiveLog = exports.RetentionPropertiesFilterSensitiveLog = exports.MagneticStoreWritePropertiesFilterSensitiveLog = exports.MagneticStoreRejectedDataLocationFilterSensitiveLog = exports.S3ConfigurationFilterSensitiveLog = exports.CreateDatabaseResponseFilterSensitiveLog = exports.DatabaseFilterSensitiveLog = exports.CreateDatabaseRequestFilterSensitiveLog = exports.TagFilterSensitiveLog = exports.RejectedRecordsException = exports.TimeUnit = exports.MeasureValueType = exports.DimensionValueType = exports.ResourceNotFoundException = exports.TableStatus = exports.S3EncryptionOption = exports.ValidationException = exports.ThrottlingException = exports.ServiceQuotaExceededException = exports.InvalidEndpointException = exports.InternalServerException = exports.ConflictException = exports.AccessDeniedException = void 0;
exports.WriteRecordsResponseFilterSensitiveLog = exports.WriteRecordsRequestFilterSensitiveLog = exports.UpdateTableResponseFilterSensitiveLog = exports.UpdateTableRequestFilterSensitiveLog = exports.UpdateDatabaseResponseFilterSensitiveLog = void 0;
const TimestreamWriteServiceException_1 = require("./TimestreamWriteServiceException");
class AccessDeniedException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class ConflictException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConflictException = ConflictException;
class InternalServerException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
exports.InternalServerException = InternalServerException;
class InvalidEndpointException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidEndpointException = InvalidEndpointException;
class ServiceQuotaExceededException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ServiceQuotaExceededException = ServiceQuotaExceededException;
class ThrottlingException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
exports.ThrottlingException = ThrottlingException;
class ValidationException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
exports.ValidationException = ValidationException;
var S3EncryptionOption;
(function (S3EncryptionOption) {
    S3EncryptionOption["SSE_KMS"] = "SSE_KMS";
    S3EncryptionOption["SSE_S3"] = "SSE_S3";
})(S3EncryptionOption = exports.S3EncryptionOption || (exports.S3EncryptionOption = {}));
var TableStatus;
(function (TableStatus) {
    TableStatus["ACTIVE"] = "ACTIVE";
    TableStatus["DELETING"] = "DELETING";
})(TableStatus = exports.TableStatus || (exports.TableStatus = {}));
class ResourceNotFoundException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
var DimensionValueType;
(function (DimensionValueType) {
    DimensionValueType["VARCHAR"] = "VARCHAR";
})(DimensionValueType = exports.DimensionValueType || (exports.DimensionValueType = {}));
var MeasureValueType;
(function (MeasureValueType) {
    MeasureValueType["BIGINT"] = "BIGINT";
    MeasureValueType["BOOLEAN"] = "BOOLEAN";
    MeasureValueType["DOUBLE"] = "DOUBLE";
    MeasureValueType["MULTI"] = "MULTI";
    MeasureValueType["TIMESTAMP"] = "TIMESTAMP";
    MeasureValueType["VARCHAR"] = "VARCHAR";
})(MeasureValueType = exports.MeasureValueType || (exports.MeasureValueType = {}));
var TimeUnit;
(function (TimeUnit) {
    TimeUnit["MICROSECONDS"] = "MICROSECONDS";
    TimeUnit["MILLISECONDS"] = "MILLISECONDS";
    TimeUnit["NANOSECONDS"] = "NANOSECONDS";
    TimeUnit["SECONDS"] = "SECONDS";
})(TimeUnit = exports.TimeUnit || (exports.TimeUnit = {}));
class RejectedRecordsException extends TimestreamWriteServiceException_1.TimestreamWriteServiceException {
    constructor(opts) {
        super({
            name: "RejectedRecordsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RejectedRecordsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RejectedRecordsException.prototype);
        this.Message = opts.Message;
        this.RejectedRecords = opts.RejectedRecords;
    }
}
exports.RejectedRecordsException = RejectedRecordsException;
const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagFilterSensitiveLog = TagFilterSensitiveLog;
const CreateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDatabaseRequestFilterSensitiveLog = CreateDatabaseRequestFilterSensitiveLog;
const DatabaseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DatabaseFilterSensitiveLog = DatabaseFilterSensitiveLog;
const CreateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateDatabaseResponseFilterSensitiveLog = CreateDatabaseResponseFilterSensitiveLog;
const S3ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.S3ConfigurationFilterSensitiveLog = S3ConfigurationFilterSensitiveLog;
const MagneticStoreRejectedDataLocationFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MagneticStoreRejectedDataLocationFilterSensitiveLog = MagneticStoreRejectedDataLocationFilterSensitiveLog;
const MagneticStoreWritePropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MagneticStoreWritePropertiesFilterSensitiveLog = MagneticStoreWritePropertiesFilterSensitiveLog;
const RetentionPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RetentionPropertiesFilterSensitiveLog = RetentionPropertiesFilterSensitiveLog;
const CreateTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateTableRequestFilterSensitiveLog = CreateTableRequestFilterSensitiveLog;
const TableFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TableFilterSensitiveLog = TableFilterSensitiveLog;
const CreateTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.CreateTableResponseFilterSensitiveLog = CreateTableResponseFilterSensitiveLog;
const DeleteDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteDatabaseRequestFilterSensitiveLog = DeleteDatabaseRequestFilterSensitiveLog;
const DeleteTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DeleteTableRequestFilterSensitiveLog = DeleteTableRequestFilterSensitiveLog;
const DescribeDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDatabaseRequestFilterSensitiveLog = DescribeDatabaseRequestFilterSensitiveLog;
const DescribeDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeDatabaseResponseFilterSensitiveLog = DescribeDatabaseResponseFilterSensitiveLog;
const DescribeEndpointsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeEndpointsRequestFilterSensitiveLog = DescribeEndpointsRequestFilterSensitiveLog;
const EndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.EndpointFilterSensitiveLog = EndpointFilterSensitiveLog;
const DescribeEndpointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeEndpointsResponseFilterSensitiveLog = DescribeEndpointsResponseFilterSensitiveLog;
const DescribeTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTableRequestFilterSensitiveLog = DescribeTableRequestFilterSensitiveLog;
const DescribeTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DescribeTableResponseFilterSensitiveLog = DescribeTableResponseFilterSensitiveLog;
const DimensionFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.DimensionFilterSensitiveLog = DimensionFilterSensitiveLog;
const ListDatabasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListDatabasesRequestFilterSensitiveLog = ListDatabasesRequestFilterSensitiveLog;
const ListDatabasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListDatabasesResponseFilterSensitiveLog = ListDatabasesResponseFilterSensitiveLog;
const ListTablesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTablesRequestFilterSensitiveLog = ListTablesRequestFilterSensitiveLog;
const ListTablesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTablesResponseFilterSensitiveLog = ListTablesResponseFilterSensitiveLog;
const ListTagsForResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTagsForResourceRequestFilterSensitiveLog = ListTagsForResourceRequestFilterSensitiveLog;
const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.ListTagsForResourceResponseFilterSensitiveLog = ListTagsForResourceResponseFilterSensitiveLog;
const MeasureValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.MeasureValueFilterSensitiveLog = MeasureValueFilterSensitiveLog;
const _RecordFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports._RecordFilterSensitiveLog = _RecordFilterSensitiveLog;
const RecordsIngestedFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RecordsIngestedFilterSensitiveLog = RecordsIngestedFilterSensitiveLog;
const RejectedRecordFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.RejectedRecordFilterSensitiveLog = RejectedRecordFilterSensitiveLog;
const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagResourceRequestFilterSensitiveLog = TagResourceRequestFilterSensitiveLog;
const TagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.TagResourceResponseFilterSensitiveLog = TagResourceResponseFilterSensitiveLog;
const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UntagResourceRequestFilterSensitiveLog = UntagResourceRequestFilterSensitiveLog;
const UntagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UntagResourceResponseFilterSensitiveLog = UntagResourceResponseFilterSensitiveLog;
const UpdateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateDatabaseRequestFilterSensitiveLog = UpdateDatabaseRequestFilterSensitiveLog;
const UpdateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateDatabaseResponseFilterSensitiveLog = UpdateDatabaseResponseFilterSensitiveLog;
const UpdateTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateTableRequestFilterSensitiveLog = UpdateTableRequestFilterSensitiveLog;
const UpdateTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.UpdateTableResponseFilterSensitiveLog = UpdateTableResponseFilterSensitiveLog;
const WriteRecordsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WriteRecordsRequestFilterSensitiveLog = WriteRecordsRequestFilterSensitiveLog;
const WriteRecordsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.WriteRecordsResponseFilterSensitiveLog = WriteRecordsResponseFilterSensitiveLog;
