import { TimestreamWriteServiceException as __BaseException } from "./TimestreamWriteServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidEndpointException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export var S3EncryptionOption;
(function (S3EncryptionOption) {
    S3EncryptionOption["SSE_KMS"] = "SSE_KMS";
    S3EncryptionOption["SSE_S3"] = "SSE_S3";
})(S3EncryptionOption || (S3EncryptionOption = {}));
export var TableStatus;
(function (TableStatus) {
    TableStatus["ACTIVE"] = "ACTIVE";
    TableStatus["DELETING"] = "DELETING";
})(TableStatus || (TableStatus = {}));
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export var DimensionValueType;
(function (DimensionValueType) {
    DimensionValueType["VARCHAR"] = "VARCHAR";
})(DimensionValueType || (DimensionValueType = {}));
export var MeasureValueType;
(function (MeasureValueType) {
    MeasureValueType["BIGINT"] = "BIGINT";
    MeasureValueType["BOOLEAN"] = "BOOLEAN";
    MeasureValueType["DOUBLE"] = "DOUBLE";
    MeasureValueType["MULTI"] = "MULTI";
    MeasureValueType["TIMESTAMP"] = "TIMESTAMP";
    MeasureValueType["VARCHAR"] = "VARCHAR";
})(MeasureValueType || (MeasureValueType = {}));
export var TimeUnit;
(function (TimeUnit) {
    TimeUnit["MICROSECONDS"] = "MICROSECONDS";
    TimeUnit["MILLISECONDS"] = "MILLISECONDS";
    TimeUnit["NANOSECONDS"] = "NANOSECONDS";
    TimeUnit["SECONDS"] = "SECONDS";
})(TimeUnit || (TimeUnit = {}));
export class RejectedRecordsException extends __BaseException {
    constructor(opts) {
        super({
            name: "RejectedRecordsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RejectedRecordsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RejectedRecordsException.prototype);
        this.Message = opts.Message;
        this.RejectedRecords = opts.RejectedRecords;
    }
}
export const TagFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DatabaseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const S3ConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MagneticStoreRejectedDataLocationFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MagneticStoreWritePropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RetentionPropertiesFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TableFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const CreateTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DeleteTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeEndpointsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const EndpointFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeEndpointsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DescribeTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const DimensionFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListDatabasesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListDatabasesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListTablesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListTablesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListTagsForResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const ListTagsForResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const MeasureValueFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const _RecordFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RecordsIngestedFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const RejectedRecordFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const TagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UntagResourceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UntagResourceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateDatabaseRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateDatabaseResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateTableRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const UpdateTableResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WriteRecordsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
});
export const WriteRecordsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
