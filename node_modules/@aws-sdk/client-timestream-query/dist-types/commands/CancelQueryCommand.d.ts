import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { CancelQueryRequest, CancelQueryResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TimestreamQueryClientResolvedConfig } from "../TimestreamQueryClient";
export interface CancelQueryCommandInput extends CancelQueryRequest {
}
export interface CancelQueryCommandOutput extends CancelQueryResponse, __MetadataBearer {
}
/**
 * <p> Cancels a query that has been issued. Cancellation is provided only if the query has
 *             not completed running before the cancellation request was issued. Because cancellation
 *             is an idempotent operation, subsequent cancellation requests will return a
 *                 <code>CancellationMessage</code>, indicating that the query has already been
 *             canceled. See <a href="https://docs.aws.amazon.com/timestream/latest/developerguide/code-samples.cancel-query.html">code
 *                 sample</a> for details. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TimestreamQueryClient, CancelQueryCommand } from "@aws-sdk/client-timestream-query"; // ES Modules import
 * // const { TimestreamQueryClient, CancelQueryCommand } = require("@aws-sdk/client-timestream-query"); // CommonJS import
 * const client = new TimestreamQueryClient(config);
 * const command = new CancelQueryCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link CancelQueryCommandInput} for command's `input` shape.
 * @see {@link CancelQueryCommandOutput} for command's `response` shape.
 * @see {@link TimestreamQueryClientResolvedConfig | config} for TimestreamQueryClient's `config` shape.
 *
 */
export declare class CancelQueryCommand extends $Command<CancelQueryCommandInput, CancelQueryCommandOutput, TimestreamQueryClientResolvedConfig> {
    readonly input: CancelQueryCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: CancelQueryCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TimestreamQueryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<CancelQueryCommandInput, CancelQueryCommandOutput>;
    private serialize;
    private deserialize;
}
