import { EndpointParameterInstructions } from "@aws-sdk/middleware-endpoint";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer, MiddlewareStack } from "@aws-sdk/types";
import { PrepareQueryRequest, PrepareQueryResponse } from "../models/models_0";
import { ServiceInputTypes, ServiceOutputTypes, TimestreamQueryClientResolvedConfig } from "../TimestreamQueryClient";
export interface PrepareQueryCommandInput extends PrepareQueryRequest {
}
export interface PrepareQueryCommandOutput extends PrepareQueryResponse, __MetadataBearer {
}
/**
 * <p>A synchronous operation that allows you to submit a query with parameters to be stored
 *             by Timestream for later running. Timestream only supports using this operation with the
 *                 <code>PrepareQueryRequest$ValidateOnly</code> set to <code>true</code>. </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { TimestreamQueryClient, PrepareQueryCommand } from "@aws-sdk/client-timestream-query"; // ES Modules import
 * // const { TimestreamQueryClient, PrepareQueryCommand } = require("@aws-sdk/client-timestream-query"); // CommonJS import
 * const client = new TimestreamQueryClient(config);
 * const command = new PrepareQueryCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link PrepareQueryCommandInput} for command's `input` shape.
 * @see {@link PrepareQueryCommandOutput} for command's `response` shape.
 * @see {@link TimestreamQueryClientResolvedConfig | config} for TimestreamQueryClient's `config` shape.
 *
 */
export declare class PrepareQueryCommand extends $Command<PrepareQueryCommandInput, PrepareQueryCommandOutput, TimestreamQueryClientResolvedConfig> {
    readonly input: PrepareQueryCommandInput;
    static getEndpointParameterInstructions(): EndpointParameterInstructions;
    constructor(input: PrepareQueryCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: TimestreamQueryClientResolvedConfig, options?: __HttpHandlerOptions): Handler<PrepareQueryCommandInput, PrepareQueryCommandOutput>;
    private serialize;
    private deserialize;
}
